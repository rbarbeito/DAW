1-)Crea un programa que pida un número al usuario un número de mes (por ejemplo, el 4)
y diga cuántos días tiene (por ejemplo, 30) y el nombre del mes.
Debes usar listas. Para simplificarlo vamos a suponer que febrero tiene 28 días.


2-)Escriba un programa que permita crear dos listas de palabras y que, a continuación,
escriba las siguientes listas (en las que no debe haber repeticiones):

-Lista de palabras que aparecen en las dos listas.
-Lista de palabras que aparecen en la primera lista, pero no en la segunda.
-Lista de palabras que aparecen en la segunda lista, pero no en la primera.
-Lista de palabras que aparecen en ambas listas.


Nota: Para evitar las repeticiones, el programa deberá empezar eliminando los elementos
      repetidos en cada lista.


3-)Diseñar el algoritmo correspondiente a un programa, que:

Crea una tabla (lista con dos dimensiones) de 5x5 enteros.
Carga la tabla con valores numéricos enteros.
Suma todos los elementos de cada fila y todos los elementos de cada columna visualizando
los resultados en pantalla.

4-)Diseñar el algoritmo correspondiente a un programa, que:

Crea una tabla bidimensional de longitud 5x15 y nombre ‘marco’.
Carga la tabla con dos únicos valores 0 y 1, donde el valor uno ocupará las posiciones o
elementos que delimitan la tabla, es decir, las más externas, mientras que el resto de los
elementos contendrán el valor 0.

5-)Vamos a crear un programa que tenga el siguiente menú:

1-Añadir número a la lista: Me pide un número de la lista y lo añade al final de la lista.
2-Añadir número de la lista en una posición: Me pide un número y una posición,
y si la posición existe en la lista lo añade a ella (la posición se pide a partir de 1).
3-Longitud de la lista: te muestra el número de elementos de la lista.
4-Eliminar el último número: Muestra el último número de la lista y lo borra.
5-Eliminar un número: Pide una posición, y si la posición existe en la lista lo borra
de ella (la posición se pide a partir de 1).
6-Contar números: Te pide un número y te dice cuantas apariciones hay en la lista.
7-Posiciones de un número: Te pide un número y te dice en que posiciones está (contando desde 1).
8-Mostrar números: Muestra los números de la lista
9-Salir

-------------------------------------------------------------------------------------------
EJERCICIO COMPLETO: EL JUEGO DEL AHORCADO
-------------------------------------------------------------------------------------------
Pensando antes de programar
Una fase importante en la programación, con independencia del lenguaje que se utilice,
es la que tiene lugar antes de empezar a programar. Es muy importante pensar en nuestro
problema y estudiar la forma en que vamos a solucionarlo. Esta fase de análisis y diseño de
software es lo que vamos a hacer en esta sección.

Vamos a empezar por pensar un poco cómo discurre el transcurso de este juego en la vida
real para luego trasladarlo a la programación de forma que nuestro programa quede lo
más «natural posible».

Para ello veremos cuál es la serie de eventos que suceden durante el juego.
Después escribiremos un programa que concuerde con esa serie de eventos y, probablemente,
cada uno de esos eventos quede reflejado como una función, lo que nos permitirá tener un
programa con las funcionalidades bien repartidas y delimitadas, que será más fácil de escribir,
de leer y de mantener.

La mecánica del juego
En el juego intervienen dos jugadores, el que conoce la palabra secreta y el que tiene que adivinarla. Vamos a llamarlos, respectivamente, Guardián y Jugador. Así, Guardián es el que conoce la palabra secreta y el que va dibujando las letras y el ahorcado y Jugador el que intenta averiguarla.

Los eventos que van sucediendo en el juego son los siguientes:

1-Comienza el juego y Guardián piensa o elije una palabra secreta.
2-Guardián dibuja la horca.
3-Guardián dibuja tantas líneas como letras tiene la palabra secreta.
4-Jugador dice una letra.
5-Guardián comprueba la letra.
6-Si la letra está en la palabra, Guardián escribe la letra sobre las líneas correspondientes.
7-Si la letra no está en la palabra, Guardián la escribe como letra utilizada y dibuja una parte
del ahorcado en la horca.
8-Si se ha completado la palabra, el juego termina y Jugador gana.
9-Si se ha completado el dibujo del ahorcado, el juego termina y Jugador pierde.
10-Si no se han completado ni el dibujo ni la palabra se vuelve al paso 4.

El bucle principal del juego
La manera de trasladar los pasos que hemos visto al programa, y como dije antes, ha
de ser lo más natural posible.

Existen dos actores que son Guardián y Jugador. Guardián será el ordenador, de
forma que nuestro programa tiene que encargarse de todo lo que hace Guardián. Jugador será el usuario y por tanto el que juegue a adivinar la palabra. Como ves, lo único que tiene que hacer es decir letras. Haremos que el programa solicite al usuario una letra cuando sea el momento.





6-)El juego del ahorcado
El funcionamiento general del juego es el siguiente:

Se selecciona el tema sobre el cual se elegirá una palabra secreta
El juego elige la palabra secreta
Se le solicita al jugador adivinar la palabra secreta letra por letra
Si el jugador adivina sin equivocarse 5 veces gana en el caso opuesto pierde.

Importamos random para hacer uso de aleatoriedad en la eleección de la palabra
Pasos:
1-Listas de palabra
2-Informar al jugador las reglas
3-Seleccionar categoría de palabras
4-Declarar cantidad de vidas e iniciar el juego
5-Solicitarle al jugador que adivine una letra
6-Verificar que el jugador sigue en juego
7-Imprimir resultados del juego
8-Logica para determinar si el jugador gano
